//
//  main.cpp
//  Demo
//
//  Created by Quang Huy on 11/20/18.
//  Copyright Â© 2018 Techmaster. All rights reserved.
//

#include <iostream>
#include <string>
#include "FileManager.hpp"
#include "Array.hpp"
#include "Stack.hpp"
#include "Queue.hpp"
#include "EvaluateExpression.hpp"
#include "Link.hpp"
#include "DoubleLink.hpp"
#include "Stack+LinkedList.hpp"
#include "Queue+LinkedList.hpp"
#include "Bag+LinkedList.hpp"
#include "UnionFind.hpp"
#include "QuickUnion.hpp"
#include "WeightedUnion.hpp"
#include "SelectionSort.hpp"
#include "InsertionSort.hpp"
#include "MergeSortTopDown.hpp"
#include "MergeSortBottomUp.hpp"
#include "QuickSort.hpp"
#include "QuickSortThreeWays.hpp"
#include "HeapSort.hpp"
#include "MaxPriorityQueue.hpp"
#include "MinPriorityQueue.hpp"
#include "MaxIndexPriorityQueue.hpp"
#include "MinIndexPriorityQueue.hpp"
#include "SequentialSearchST.hpp"
#include "BinarySearchST.hpp"
#include "BinarySearchTree.hpp"
#include "RedBlackTree.hpp"
#include "SeparateChainingHashST.hpp"
#include "LinearProbingHashST.hpp"
#include "Graph.hpp"
#include "DFS.hpp"
#include "BFS.hpp"
#include "UFS.hpp"
#include "DFP.hpp"
#include "BFP.hpp"
#include "DFSConnected.hpp"
#include "UFConnected.hpp"
#include "Cycle.hpp"
#include "TwoColors.hpp"
#include "SymbolGraph.hpp"
#include "DegreesOfSeparation.hpp"
#include "Digraph.hpp"
#include "DirectedDFS.hpp"
#include "DFDirectedPath.hpp"
#include "BFDirectedPath.hpp"
#include "DirectedCycle.hpp"
#include "DFOrder.hpp"
#include "Topological.hpp"
#include "KosarajuSCC.hpp"
#include "TransitiveClosure.hpp"
#include "Edge.hpp"
#include "EdgeWeightedGraph.hpp"
#include "LazyPrimMST.hpp"
#include "EagerPrimMST.hpp"
#include "KruskalPrimMST.hpp"
#include "DirectedEdge.hpp"
#include "EdgeWeightedDigraph.hpp"
#include "DijkstraSP.hpp"
#include "DijkstraAllPairsSP.hpp"
#include "TopologicalEDW.hpp"
#include "DirectedCycleEDW.hpp"
#include "DFOrderEDW.hpp"
#include "AcylicSP.hpp"
#include "AcyclicLP.hpp"
#include "CPM.hpp"
#include "BellmanFordSP.hpp"
#include "Arbitrage.hpp"
#include "LSD.hpp"
#include "MSD.hpp"
#include "QuickSortString.hpp"
#include "Trie.hpp"
#include "TST.hpp"
#include "BFSubString.hpp"
#include "ABFSubString.hpp"
#include "KMPSubString.hpp"
#include "BMSubString.hpp"
#include "NFA.hpp"

using namespace std;
int main() {
    string fileName = "/Users/huy/Desktop/Demo/Demo/test.txt";
    StdIn in(fileName);
    NFA nfa("((abc)*1[a-c]){3}");
    cout << nfa.recognizes("abcabcabcabcabcabc1aabcabc1babcabcabcabcabc1c") << endl;
}
